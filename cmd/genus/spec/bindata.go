// Code generated by go-bindata.
// sources:
// cmd/genus/spec/plan_schema.json
// DO NOT EDIT!

package spec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdGenusSpecPlan_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x4f\xe3\x3c\x10\xbe\xf7\x57\x8c\xf2\x72\x0c\x6f\x77\xa5\x3d\x71\x83\xa5\x20\x24\xc4\x56\x50\x69\x0f\x2b\x0e\x6e\x32\x6d\x0c\x89\x9d\xb5\x9d\x42\xb5\xe2\xbf\xef\xd8\xf9\x68\x93\x38\xc0\x42\xca\x01\x81\xc7\x33\xcf\xe3\xf9\x78\x26\x7f\x26\x00\xc1\x91\x8e\x12\xcc\x58\x70\x02\x41\x62\x4c\x7e\x32\x9d\x3e\x68\x29\x8e\xcb\xd3\xff\xa5\x5a\x4f\x63\xc5\x56\xe6\xf8\xcb\xb7\x69\x79\xf6\x5f\x10\x5a\x3f\xb3\xcd\xd1\x3a\xc9\xe5\x03\x46\xa6\x3c\xcb\x95\xcc\x51\x19\x8e\x9a\x2c\x36\x3a\x9d\xdd\x15\xab\x15\x7f\x6e\xfe\xdf\xf3\xd4\x46\x71\xb1\x76\x9e\xee\x3c\xe3\xe2\x1a\xc5\xda\x24\x64\xfc\xda\x9c\xc6\xa8\x23\xc5\x73\xc3\xa5\xb0\x4e\x65\x38\x90\x2b\x30\x98\xe5\x29\x33\x84\xe5\xae\xbe\x94\x1e\xc1\xa2\x3a\x3e\xe7\x6a\x34\xd0\x3a\x26\xc4\x5c\xd1\x63\xa5\xda\xb6\x31\xcf\x98\x1e\x15\xcf\xc6\xdb\x61\xc1\x4a\x2a\x58\xa3\x40\x45\x14\x62\x88\x64\x8c\x21\xc4\xb8\x62\x45\x6a\x9c\xed\x68\xfe\xf3\xbc\x4f\x68\xce\xa2\x47\xb6\xc6\x71\x49\xad\x25\xe4\x65\x5c\x87\x9c\xca\x88\xa5\xc0\xb3\x5c\x2a\xa3\x81\x8b\x0e\xcd\x36\xa9\xbb\x47\x9e\xcf\x9e\xb9\x36\xda\xc7\x69\x29\x65\x8a\x4c\x04\x83\x85\x47\x03\x46\x82\x51\x05\x02\x5f\xc1\x56\x16\xf0\xc4\x84\x3b\xd3\x14\xb8\x46\xa6\xdb\x20\x45\x44\xf4\x78\x8a\x80\x25\x5c\x8f\xc6\x85\x54\x19\x33\x07\xa1\x21\x6d\x62\x28\x38\x25\xf8\x3d\x44\xf8\xf3\x55\x99\xbd\x43\x90\xa1\x49\xb1\x34\xaa\xfa\xb4\xd1\xe7\x29\x13\x57\x34\x43\x5e\x60\xa6\x14\xdb\xee\x60\x79\xe7\x9e\x7f\xfc\x2b\x8b\x47\x04\x2a\x4b\x4f\x0a\x5e\x6f\xcb\xd7\x9a\x73\x20\x1f\x43\xe2\x50\xfe\xbc\xec\x7b\x0f\x08\xc5\xd8\x94\x86\xa4\xc3\xc7\xa8\x2f\x23\x63\xb3\xf9\xb0\xb0\x0c\xd1\xed\x8b\xcc\x41\x28\x7f\x44\x76\x7c\x94\xbd\x12\xd4\x61\xdc\x1d\x3a\x3f\xad\x4f\xcb\xd1\x10\xbd\x9e\x34\x1d\x86\xde\xdb\x32\x35\x48\xd0\x27\x59\x07\x21\xe9\x93\x2f\x1f\xab\x0f\x36\x61\x87\x4d\x15\xc5\xaa\xc7\x7b\xdb\xc9\x6a\xe8\xa2\xc4\xf8\x27\x64\x14\x45\x46\xd6\x5f\xc1\xdd\xd5\xcd\xe5\xf5\x6c\xf1\xe3\x26\x08\x21\xb8\x9d\xcd\x67\xa7\x8b\xd3\xb3\xeb\x59\x70\xff\xae\xc4\xed\x1c\x6c\xfa\x48\x66\x04\x70\x4d\x35\xc4\xa8\xb0\xdc\x33\x1a\x63\x9e\x53\x55\x0d\xcf\x50\xc3\x13\x37\x09\xe0\x06\x69\xee\x35\x71\xa2\x73\x2b\xeb\x6e\x7a\xf8\x06\x05\xc4\xcc\xb0\x10\xa4\x49\x50\x3d\x71\x9a\x39\x4d\x20\xdc\xe1\x34\x2c\x67\xc3\xa9\xb8\x45\x52\x39\x8a\x33\x4e\x2d\xea\x68\xcd\xd4\x5b\x49\x4f\xb0\x53\x18\x28\x44\x8c\xca\x19\x6a\xe9\x1c\xe4\x77\x41\xed\x2d\x58\xf6\x59\x62\x75\x18\x4b\x88\xfa\xb5\x2f\x9f\x26\xa1\x12\x44\x54\x89\x25\x02\x83\x4b\xd9\x6c\x22\x60\x51\x84\xb9\x9b\x37\x4b\x18\xb3\x25\xc6\xe4\x75\x4e\x59\x77\x85\x78\x7b\x51\xdd\x10\xee\x2b\x33\xd7\xde\xd9\x95\xb1\xbf\xb9\xfd\xaf\x6e\x99\x5b\xf0\xc3\x1b\xcd\xe6\x41\x87\x50\xe8\x82\xa5\x29\x35\x95\xa4\xb4\xa8\x5d\xe1\xa8\xdb\x5c\xcb\x35\x09\xd0\xe5\x76\x56\x98\xc9\x0d\xc6\xc3\xef\x7d\x53\x5d\x7a\xdf\x1c\x3e\x9a\xdf\x25\xc1\x22\xc1\xd6\x6b\xc2\x2e\x0e\x57\x32\x3b\x28\x61\x53\xa3\xa5\x96\x69\xb1\x77\xad\xbb\x5e\x42\x78\xc4\xad\x9d\x2b\x96\x72\xa6\xeb\x46\x2c\x8d\x21\x30\x11\xc3\x86\xa5\x56\xc0\xb4\x33\xb0\xc8\x50\x3a\xdc\xf3\x87\x5f\x68\x8b\x3e\x76\x21\xab\xa4\xb4\x0b\x39\xf1\xfd\xbd\xc7\x25\x50\xf8\xbb\xa0\xcf\x81\xd8\xa9\x51\x23\x67\xf7\x93\x7d\x1f\xfb\xdb\xf9\xb4\x6e\xdf\x4f\x5e\x26\x7f\x03\x00\x00\xff\xff\x0b\x8c\x8a\xc8\x41\x0e\x00\x00")

func cmdGenusSpecPlan_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_cmdGenusSpecPlan_schemaJson,
		"cmd/genus/spec/plan_schema.json",
	)
}

func cmdGenusSpecPlan_schemaJson() (*asset, error) {
	bytes, err := cmdGenusSpecPlan_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/genus/spec/plan_schema.json", size: 3649, mode: os.FileMode(420), modTime: time.Unix(1486457023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/genus/spec/plan_schema.json": cmdGenusSpecPlan_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"genus": &bintree{nil, map[string]*bintree{
			"spec": &bintree{nil, map[string]*bintree{
				"plan_schema.json": &bintree{cmdGenusSpecPlan_schemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
